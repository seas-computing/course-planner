# General app settings

# Used in places (e.g the window title) to show the application name
APP_NAME=

# The URL of the CAS endpoint to use for authentication
CAS_URL=

# The environment the app is running in. Can be "development" or "production"
NODE_ENV=

# The HTTPS_ configurations below can generally be left blank in
# development/testing, and only need to be set in production. The _CERT and
# _KEY are meant to be used when connecting to the container from a
# client-facing load balancer or proxy. That client-facing service will handle
# the "real" https connection, while these HTTPS settings will just encrypt the
# conenction between the container and the load balancer. Assuming that both
# are under the same ownership, it's OK to provide a self-signed certificate
# here.
#
# To generate a certificate and key locally, you can run:
#
# $ openssl req -x509 -newkey rsa:4096 -days 3650 -subj "/CN=localhost" -nodes -keyout private.key -out public.crt
#
# The contents of public.crt and private.key can then be copied into the _KEY
# and _CERT variables below

# Whether the app should listen via https on the SERVER_PORT. Should be "true"
# to listen for https, and "false" for plain http. Leaving it blank, or using
# any other value, will be be the same as "false". When set to true, you will
# also need to provide the HTTPS_PUBLIC_CERT and HTTPS_PRIVATE_KEY values below
HTTPS_ON=false

# The Public certificate that will be used to serve the app over https when
# HTTPS_ON is true. This can be left blank in development. Should be a string in
# PEM format. See `cert` argument to tls.createSecureContext()
# https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions
HTTPS_PUBLIC_CERT=

# The Private key that will be used alongside the public cert when HTTPS_ON is
# true. Can be left blank in development. Should be a string in PEM format. See
# `key` argument to tls.createSecureContext()
# https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions
HTTPS_PRIVATE_KEY=

# The maximum level of log that should be shown. Must be one of the following
# strings:
#
#   error
#   warn
#   info
#   http
#   verbose
#   debug
# 
# Defaults to "error"
LOG_LEVEL=

# The full url for the server backend
# e.g. http://localhost:3001/
SERVER_URL=

# The port the web server should run on.
SERVER_PORT=

# The port that webpack dev server should run on
# FOR DEVELOPMENT ONLY
CLIENT_PORT=

# The secret to use for encrypting sessions. Be sure to pick a long, randomized
# string in production
SESSION_SECRET=

# The public URL for the app, which will point to the client code
# e.g. http://localhost:3000
CLIENT_URL=

# The hostname for the world-readable version of the application
# e.g. PUBLIC_CLIENT_URL=info.seas.harvard.edu
PUBLIC_CLIENT_URL=

# Main backend data store settings
#   The main backend data store is used as the main data storage recepticle for
#   this application

# The hostname or IP address of the app's main DB server
DB_HOSTNAME=

# The port the DB server is running on
DB_PORT=

# The database or schema name to connect to
DB_DATABASE=

# The username to use to authenticate
DB_USERNAME=

# The password to use to authenticate
DB_PASSWORD=

# Redis Configuration
#   Redis is used in this application as a store for user sessions

# The hostname or IP address of the redis server to use for sessions
REDIS_HOST=

# The password to authenticate to redis with
REDIS_PASSWORD=

# The port redis is running on
REDIS_PORT=

# A prefix used for namespacing redis keys to prevent collisions
REDIS_PREFIX=

# The current version of the app
APP_VERSION=
